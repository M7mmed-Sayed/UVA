#define _CRT_SECURE_NO_WARNINGS
/*                   وتزودوا فإن خير الزاد التقوى                    */
/*       وما تدري نفس ماذا تکسب غدا وما تدري نفس باي ارض تموت      */
#include <bits/stdc++.h>
#include<unordered_map>
using namespace std;
#define endl '\n'
#define ll long long
#define ull unsigned long long
#define dll double
#define PI acos(-1)
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define sz(n) n.size()
#define M_Sayed fast() 
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define RT(v) return cout<<v,0
#define MP	make_pair
int dx[] = { 0, 1, 0, -1, 1, 1, -1, -1 ,0 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 ,0 };
const double EPS = (1e-7);
ll Ceil(ll x, ll y) { return (x + y - 1) / y; }
void run() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	//freopen("input.txt", "w", stdout);
#else
#endif
}
ll gcd(ll a, ll b) { return !b ? abs(a) : gcd(b, a % b); }
ll lcm(ll a, ll b) { return abs(a / gcd(a, b)) * b; }
ll power(ll x, ll y, ll mod) {
	if (y == 0) return 1;
	if (y == 1) return x % mod;
	ll r = power(x, y >> 1, mod);
	return (((r * r) % mod) * power(x, y & 1, mod)) % mod;
}
void fast() { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); }
const ll N = 2 * 1e5 + 10, mod = 1e9 + 7; int  test = 1;
ll n, m, x, k, t = 1, quiry = 1;
vector<vector<ll>>adj;
int vs[40][40], vis[40][40][7][7];
pair<int, int>st, ed;
bool ok(int x, int y) {
	return(x >= 0 && x < n&& y >= 0 && y < m && !vs[x][y]);
}
vector<int>ans;
int bfs() {
	queue<pair< pair<int, int>, pair<int, int>>> q;
	queue<int> dep;
	dep.push(0);
	q.push({ {st.first,st.second},{0,0} });
	while (!q.empty())
	{
		int x = q.front().first.first, y = q.front().first.second;
		int xs = q.front().second.first, ys = q.front().second.second;
		q.pop();
		int de = dep.front();
		vis[x][y][0][0] = test;
		dep.pop();
		if (MP(x, y) == ed)
		{
			return de;
		}
		vis[x][y][xs + 3][ys + 3] = test;
		for (int i = 0; i < 9; i++) {
			int nexx = dx[i] + x + xs, nexy = dy[i] + y + ys;
			if (abs(xs + dx[i]) > 3 || abs(ys + dy[i]) > 3)
				continue;
			if (!ok(nexx, nexy))continue;
			if (vis[nexx][nexy][dx[i] + xs + 3][dy[i] + 3 + ys] == test)continue;
			q.push({ {nexx,nexy},{xs + dx[i],ys + dy[i]} });
			dep.push(de + 1);
		}
	}
	return -1;
}
int main()
{
	run();
	M_Sayed;
	cin >> t;
	while (t--)
	{
		cin >> n >> m;
		cin >> st.first >> st.second;
		cin >> ed.first >> ed.second;
		int x, xx, y, yy;
		cin >> k;
		test++;
		while (k--)
		{
			cin >> x >> xx >> y >> yy;
			for (int i = x; i <= xx; i++)
				for (int j = y; j <= yy; j++)vs[i][j] = 1;
		}
		int c = bfs();
		if (~c)
			cout << "Optimal solution takes " << c << " hops.\n";
		else cout << "No solution.\n";

		for (int i = 0; i <= n; i++) {
			for (int j = 0; j <= m; j++) vs[i][j] = 0;
		}

	}


}