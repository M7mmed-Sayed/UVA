#define _CRT_SECURE_NO_WARNINGS
/*                   وتزودوا فإن خير الزاد التقوى                    */
/*       وما تدري نفس ماذا تکسب غدا وما تدري نفس باي ارض تموت      */
#include <bits/stdc++.h>
#include<unordered_map>
using namespace std;
#define endl '\n'
#define ll long long
#define ull unsigned long long
#define dll double
#define PI acos(-1)
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define sz(n) n.size()
#define M_Sayed fast() 
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define RT(v) return cout<<v,0
#define MP	make_pair
int dx[] = { 0, 1, 0, -1, 1, 1, -1, -1 ,0 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 ,0 };
const double EPS = (1e-7);
ll Ceil(ll x, ll y) { return (x + y - 1) / y; }
void run() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	//freopen("input.txt", "w", stdout);
#else
#endif
}
ll gcd(ll a, ll b) { return !b ? abs(a) : gcd(b, a % b); }
ll lcm(ll a, ll b) { return abs(a / gcd(a, b)) * b; }
ll power(ll x, ll y, ll mod) {
	if (y == 0) return 1;
	if (y == 1) return x % mod;
	ll r = power(x, y >> 1, mod);
	return (((r * r) % mod) * power(x, y & 1, mod)) % mod;
}
void fast() { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); }
const ll N = 2 * 1e5 + 10, mod = 1e9 + 7; int  test = 1;
ll n, m, k, t;
vector< vector<int> > adj;
vector<int>  lowLink, dfn, inStack, scc;
stack<int> stk;
int ndfn, mx = 1e7, ind;
void tarjan(int node, int par)
{
	lowLink[node] = dfn[node] = ndfn++;
	stk.push(node);
	for (auto ch : adj[node])
	{
		if (dfn[ch] == -1)
		{
			tarjan(ch, node);
			lowLink[node] = min(lowLink[node], lowLink[ch]);
		}
		else if (ch != par)
		{
			lowLink[node] = min(lowLink[node], dfn[ch]);
		}
	}
	if (dfn[node] == lowLink[node])
	{
		int x = -1;
		ind++;
		int c = 0;
		while (x != node)
		{
			c++;
			x = stk.top(),
				scc[x] = ind;
			stk.pop(), inStack[x] = 0;
		}
	}
}
vector<int>vis;
int cs = 0;
void rest(bool b)
{
	lowLink = dfn = vector<int>(n + 1, -1);
	inStack = scc = vis = vector<int>(n + 1, 0);
	adj = vector< vector<int>>(n + 5);
	ndfn = ind = mx = 0;
	cs = 1;
}
void dfs(int s) {
	vis[s] = cs;
	for (auto i : adj[s])
	{
		if (!vis[i] && scc[i] != scc[s])dfs(i);
	}
}
int main()
{
	run();
	M_Sayed;
	int cu = 0;
	while (cin >> n) {

		rest(1);
		if (!n)RT("");
		int x, y;
		cin >> m >> k;
		while (m--) {
			cin >> x >> y;
			adj[x].push_back(y);
			adj[y].push_back(x);
		}
		for (int i = 1; i <= n; i++) {
			if (dfn[i] == -1) {
				tarjan(i, -1);
			}
		}
		for (int i = 1; i <= n; i++)if (!vis[i]) {
			dfs(i); cs++;
		}
		while (k--) {
			cin >> x >> y;
			cout << (vis[x] == vis[y] ? "Y" : "N") << endl;
		}
		cout << "-\n";
	}
}