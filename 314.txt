#define _CRT_SECURE_NO_WARNINGS
/*                   ФйрФоФг щеД нМя гАрго гАйчФЛ                    */
/*       ФЦг йояМ Дщс Цгпг й≤сх шог ФЦг йояМ Дщс хгМ гяж йЦФй      */
#include <bits/stdc++.h>
#include<unordered_map>
#include<iomanip>
#include<fstream>
using namespace std;
#define endl '\n'
#define ll long long
#define ull unsigned long long
#define mem(dp,x)  memset(dp,x,sizeof dp);
#define PI acos(-1)
#define watch(x) cerr<<#x<<" = "<<x<<" \n"
#define sz(n) n.size()
#define M_Sayed fast()
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define RT(v) return cout<<v,0
#define MP					make_pair
int dx[]= {-1,0,1,0};
int dy[]= {0,1,0,-1};
const double EPS = (1e-7);
const ll  mod = (1e9 + 7), OO = 1e9,N=100000+1;
ll Ceil(ll x, ll y)
{
    return (x + y - 1) / y;
}
void run()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //freopen("input", "r", stdin);
    //freopen("output", "w", stdout);
#endif
}
void fast()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

struct node
{
    int x,y,Dir;
    node(int a,int b,int c)
    {
        x=a;
        y=b;
        Dir=c;
    }
};

ll n,m,test=1,cit,k;
string s;
char dr[]= {'l','u','r','d'};
bool grid[55][55];
bool vis[55][55][5];
bool val(int x, int y)
{
    if(x<=0 || y<=0 || x>=n|| y>=m) return 0;
    if(grid[x][y]||grid[x][y-1]||grid[x-1][y-1]||grid[x-1][y])return 0;
    return 1;
}
node st(0,0,0),ed(0,0,0);
int bfs()
{
    queue<pair<node,int>>q;
    q.push({st,0});
    int a=st.x,b=st.y,dir=st.Dir;
    int c=ed.x,d=ed.y;
    if(!val(a,b)||!val(c,d))
        return -1;
    vis[a][b][dir]=1;
    int ans=-1;
    while(!q.empty())
    {
        node top=q.front().first;
        int dep=q.front().second;
        q.pop();
        int r,l,in;
        r=top.x,l=top.y;
        in=top.Dir;
        for(int i=1; i<=3; i++)
        {
            if(!val( r+(dx[in]*i), l+(dy[in]*i) ))break;
            if(vis[r+(dx[in]*i)][l+(dy[in]*i)][in])continue;
            vis[r+(dx[in]*i)][l+(dy[in]*i)][in]=1;
            q.push({node(r+(dx[in]*i),l+(dy[in]*i),in),dep+1} );
        }
        node po(top.x,top.y,(top.Dir+1)%4);
        node ne(top.x,top.y,(top.Dir+3)%4);
        if(!vis[po.x][po.y][po.Dir])
        {
            vis[po.x][po.y][po.Dir]=1;
            q.push({po,dep+1});
        }
        if(!vis[ne.x][ne.y][ne.Dir])
        {
            vis[ne.x][ne.y][ne.Dir]=1;
            q.push({ne,dep+1});
        }
        if(top.x==c && top.y==d)
        {
            return dep;
        }
    }
    return -1;
}
int main()
{
    run();
    M_Sayed;
    while(cin>>n>>m&&n&&m)
    {
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                grid[i][j]=0;
                cin>>grid[i][j];
                vis[i][j][0]=0;
                vis[i][j][1]=0;
                vis[i][j][2]=0;
                vis[i][j][3]=0;
            }
        }
        int a,b,c,d,dir;
        cin>>a>>b>>c>>d>>s;
        if(s[0]=='n')dir=0;
        if(s[0]=='e')dir=1;
        if(s[0]=='s')dir=2;
        if(s[0]=='w')dir=3;
        st=node (a,b,dir);
        ed=node (c,d,dir);
        cout<<(bfs())<<endl;;
    }
}