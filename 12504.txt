#define _CRT_SECURE_NO_WARNINGS
#include <bits/stdc++.h>
using namespace std;
#define endl '\n'
#define ll long long
#define ull unsigned long long
#define dll double
#define PI acos(-1)
#define sz(n) n.size()
#define RR return
#define M7mmed_Sayed run()
#define M_Sayed fast() 
#define all(v) v.begin(),v.end()
void run() {
#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
	//freopen("output.out", "w", stdout);
#else
#endif
}
void fast() {
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
}
ll  gcd(ll x, ll y) { return(y == 0) ? x : gcd(y, x % y); }
ull lcm(ll x, ll y) { RR  x / gcd(x, y) * y; }
ll power(ll x, ll k, ll mod)
{
	ll ret = 1;
	while (k) {
		if (k & 1) ret = (ret * x) % mod;
		k >>= 1; x = (x * x) % mod;
	}
	return ret;
}
ll nCr(ll n, ll r) {
	ll ans = 1;
	ll div = 1;
	if (n)
		for (ll i = r + 1; i <= n; i++) {
			ans = ans * i;
			ans /= div;
			div++;
		}
	return ans;
}
ll mod = 1073741824;
int arr[10000009];
void gr()
{
	for (int i = 1; i <= 1e6 + 5; i++) {

		for (int j = i; j <= 1e6 + 5; j += i) {
			arr[j] ++;

		}
	}

}
vector<ll>vc,vw;
int main()
{
	M7mmed_Sayed;
	M_Sayed;
	ll n, m,x;
	cin >> n;
	while (n--) 
	{
		string s1, s2;
		cin >> s1 >> s2;
		bool t = 0;
		map<string, string>oldm,newm;
		string word="",num="";
		for (int i = 0; i < sz(s1); i++) {
			if (isalpha(s1[i]))
				word+=s1[i];
			if (s1[i] == ','||s1[i]=='}') 
			{	oldm[word] = num;
					word = "", num = "";
			}
			if (isdigit(s1[i]))
				num += s1[i];
		}
		t = 0;
		for (int i = 0; i < sz(s2); i++) {
			if (isalpha(s2[i]))
				word += s2[i];
			if (s2[i] == ',' || s2[i] == '}')
			{
				newm[word] = num;
				word = "", num = "";
			}
			if (isdigit(s2[i])) 
				num += s2[i];
		}
		string mins = "", pos = "", change = "";
		for (auto it : oldm) {
			if (!newm.count(it.first)) {
				if (mins.empty())
					mins += it.first;
				else
					mins +=','+ it.first;
			}
			else {
				if (newm[it.first] != it.second) {
					if (change.empty())
						change += it.first;
					else
						change += ',' + it.first;
				}
			}
		}
		for (auto it : newm) {
			if (!oldm.count(it.first)) {
				if (pos.empty())
					pos += it.first;
				else
					pos += ',' + it.first;
			}
		}
		ll c = sz(pos) + sz(mins) + sz(change);
		if (!c)
			cout << "No changes\n";
		else
		{
			if (sz(pos))
				cout << '+' << pos << endl;
			if (sz(mins))
				cout << '-' << mins << endl;
			if (sz(change))
				cout << '*' << change << endl;
		}
		cout << endl;
		
	}
}