#define _CRT_SECURE_NO_WARNINGS
/*                   وتزودوا فإن خير الزاد التقوى                    */
/*       وما تدري نفس ماذا تکسب غدا وما تدري نفس باي ارض تموت      */
#include <bits/stdc++.h>
#include<unordered_map>
#include<iomanip>
#include<fstream>
using namespace std;
#define endl '\n'
#define ll long long
#define ull unsigned long long
#define dll double
#define PI acos(-1)
#define watch(x) cerr<<#x<<" = "<<x<<" \n"
#define sz(n) n.size()
#define M_Sayed fast()
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define RT(v) return cout<<v,0
#define MP					make_pair
int dx[] = { 0, 1, 0, -1, 1, 1, -1, -1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const double EPS = (1e-7);
const ll  mod = (1e9 + 7), OO = 1e9;
ll Ceil(ll x, ll y)
{
    return (x + y - 1) / y;
}
void run()
{
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#else
    //freopen("input", "r", stdin);
    //freopen("output", "w", stdout);
#endif
}
void fast()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}
ll n,m;
vector< vector<int> > adjList ;
vector<int> inStack, lowLink, dfn;
stack<int> stk;
int ndfn;
void tarjan(int node)
{
    lowLink[node] = dfn[node] = ndfn++,
                                inStack[node] = 1;
    stk.push(node);
    for(auto ch: adjList[node])
    {
        if (dfn[ch] == -1)
        {
            tarjan(ch);
            lowLink[node] = min(lowLink[node], lowLink[ch]);
        }
        else if (inStack[ch])
            lowLink[node] = min(lowLink[node], dfn[ch]);
    }
    if (lowLink[node] == dfn[node])
    {
        int x = -1;
        while (x != node)
        {
            x = stk.top(), stk.pop(), inStack[x] = 0;
        }
    }
}
int main()
{
    M_Sayed;
  //  run();
    while(cin >>n>>m&&n&&m)
    {
        if(n==0&&m==0)RT("");
        lowLink=dfn= vector<int>(n,-1);
        inStack=vector<int>(n,0);
        adjList=vector< vector<int> >(n);
        ndfn =0;
        for(int i=0; i<m; i++)
        {
            int x,y,ty;
            cin>>x>>y>>ty;
            while(ty--)
            {
                adjList[x-1].push_back(y-1);
                swap(x,y);
            }
        }
        int ans=0;
        for(int i=0; i<n&&ans<=2; i++)
         {
             if(dfn[i]==-1)
            {
                tarjan(i);
            }
            if(lowLink[i]==dfn[i])ans++;
         }
        cout<<(ans==1)<<endl;
    }
}