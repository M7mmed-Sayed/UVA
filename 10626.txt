#define _CRT_SECURE_NO_WARNINGS
/*                   وتزودوا فإن خير الزاد التقوى                    */
/*       وما تدري نفس ماذا تکسب غدا وما تدري نفس باي ارض تموت      */
#include <bits/stdc++.h>
#include<unordered_map>
#include<iomanip>
#include<fstream>
using namespace std;
#include<iostream>
#define endl '\n'
#define ll long long
#define ull unsigned long long
#define dll double
#define PI acos(-1)
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define mem(dp,a) memset(dp,a,sizeof (dp))
#define sz(n) n.size()
#define M_Sayed fast() 
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define RT(v) return cout<<v,0
int dx[] = { 0, 1, 0, -1, 1, 1, -1, -1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const double EPS = (1e-7);
ll Ceil(ll x, ll y) { return (x + y - 1) / y; }
void run() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#else
#endif
}
ll gcd(ll a, ll b) { return !b ? abs(a) : gcd(b, a % b); }
ll lcm(ll a, ll b) { return abs(a / gcd(a, b)) * b; }
ll power(ll x, ll y, ll mod) {
	if (y == 0) return 1;
	if (y == 1) return x % mod;
	ll r = power(x, y >> 1, mod);
	return (((r * r) % mod) * power(x, y & 1, mod)) % mod;
}
void fast() { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); }
ll n, m;
map < pair<ll, pair<ll, ll>>, ll>dp;
ll solve(int cost, int one, int five, int ten)
{
	if (one < 0 || five < 0 || ten < 0) return 1e9;
	if (!cost)return 0;
	ll& ret = dp[{one, { five,ten }}];
	if (ret)return ret;
	   ret = 1e9;
		ret = min(solve(cost - 1, one - 8, five, ten) + 8, ret);
		ret = min(ret, solve(cost - 1, one - 3, five - 1, ten) + 4);
		ret = min(ret, solve(cost - 1, one - 3, five + 1, ten-1) + 4);
		ret = min(ret, solve(cost - 1, one + 2, five, ten - 1) + 1);
		ret = min(ret, solve(cost - 1, one + 2, five - 2, ten) + 2);
	return ret;
}
int main()
{
	run();
	M_Sayed;
	cin >> n;
	while (n--) {
		dp.clear();
		int cost, one, five, ten;
		cin >> cost >> one >> five >> ten;
		cout << solve(cost, one, five, ten) << endl;
	}
}