#define _CRT_SECURE_NO_WARNINGS
/*                   وتزودوا فإن خير الزاد التقوى                    */
/*       وما تدري نفس ماذا تکسب غدا وما تدري نفس باي ارض تموت      */
#include <bits/stdc++.h>
#include<unordered_map>
#include<iomanip>
#include<fstream>
using namespace std;
#define endl '\n'
#define ll long long
#define ull unsigned long long
#define dll double
#define PI acos(-1)
#define watch(x) cerr<<#x<<" = "<<x<<" \n"
#define mem(dp,a) memset(dp,a,sizeof (dp))
#define sz(n) n.size()
#define M_Sayed fast() 
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define RT(v) return cout<<v,0
int dx[] = { 0, 1, 0, -1, 1, 1, -1, -1 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 };
const double EPS = (1e-7);
const ll  mod = (1e9 + 7);
ll Ceil(ll x, ll y) { return (x + y - 1) / y; }
void run() {
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#else
	//freopen("input", "r", stdin);
	//freopen("output", "w", stdout);
#endif
}
ll gcd(ll a, ll b) { return !b ? abs(a) : gcd(b, a % b); }
ll lcm(ll a, ll b) { return abs(a / gcd(a, b)) * b; }
ll power(ll x, ll y, ll mod) {
	if (y == 0) return 1;
	if (y == 1) return x % mod; ll r = power(x, y >> 1, mod);
	return (((r * r) % mod) * power(x, y & 1, mod)) % mod;
}
void fast() { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); }
ll n, m, k, t;
int main()
{
	M_Sayed;
	while (cin >> n)
	{
		vector<int>vl, vr, li, ri;
		vl.resize(n);
		vr.resize(n);
		li.resize(n);
		ri.resize(n);
		for (int i = 0; i < n; i++) {
			cin >> vl[i];
			vr[n - i - 1] = vl[i];
		}
		int st = 0;
		for (int i = 0; i < n; i++) {
			int po =lower_bound(ri.begin(), ri.begin() + st, vl[i]) - ri.begin();
			ri[po] = vl[i];
			st += (st == po);
			li[i] = po ;
			vl[i] = 0;
		}
		st = 0;
		for (int i = 0; i < n; i++) {
			int po = lower_bound(vl.begin(), vl.begin() + st, vr[i]) - vl.begin();
			vl[po] = vr[i];
			st += (st == po);
			ri[i] = po;
		}
		reverse(all(ri));
		ll mx = 0;
		for (int i = 0; i < n; i++) {
			mx = max(mx,(ll) min(ri[i]+1, li[i]+1));
		}
		cout << 2 * mx - 1 << endl;

"Never";
	}

}