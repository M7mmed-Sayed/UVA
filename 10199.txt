#define _CRT_SECURE_NO_WARNINGS
/*                   وتزودوا فإن خير الزاد التقوى                    */
/*       وما تدري نفس ماذا تکسب غدا وما تدري نفس باي ارض تموت      */
#include <bits/stdc++.h>
#include<unordered_map>
using namespace std;
#define endl '\n'
#define ll long long
#define ull unsigned long long
#define dll double
#define PI acos(-1)
#define watch(x) cout<<#x<<" = { "<<x<<" }\n"
#define sz(n) n.size()
#define M_Sayed fast() 
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define RT(v) return cout<<v,0
#define MP	make_pair
int dx[] = { 0, 1, 0, -1, 1, 1, -1, -1 ,0 };
int dy[] = { 1, 0, -1, 0, 1, -1, 1, -1 ,0 };
const double EPS = (1e-7);
ll Ceil(ll x, ll y) { return (x + y - 1) / y; }
void run() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    //freopen("input.txt", "w", stdout);
#else
#endif
}
ll gcd(ll a, ll b) { return !b ? abs(a) : gcd(b, a % b); }
ll lcm(ll a, ll b) { return abs(a / gcd(a, b)) * b; }
ll power(ll x, ll y, ll mod) {
    if (y == 0) return 1;
    if (y == 1) return x % mod;
    ll r = power(x, y >> 1, mod);
    return (((r * r) % mod) * power(x, y & 1, mod)) % mod;
}
void fast() { ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); }
const ll N = 2 * 1e5 + 10, mod = 1e9 + 7; int  test = 1;
ll n, m, t;
vector< vector<int> > adj;
vector< vector<int> > com;
vector<int>  lowLink, dfn;
stack<int> stk;
int ndfn, mx = 1e7, ind;
set<int>ans;
set<pair<int, int>>vans;
int start, ok = 0;
void tarjan(int node, int par)
{
    lowLink[node] = dfn[node] = ndfn++;
    for (auto ch : adj[node])
    {

        if (dfn[ch] == -1)
        {
            tarjan(ch, node);
            lowLink[node] = min(lowLink[node], lowLink[ch]);
            if (lowLink[ch] >= dfn[node])
            {
                if (!ok && dfn[node] == 0)
                {
                    ok = 1;
                }
                else ans.insert(node);
            }
        }
        else if (ch != par)
        {
            lowLink[node] = min(lowLink[node], dfn[ch]);
        }
    }
}
void rest(bool b)
{
    lowLink = dfn = vector<int>(n + 1, -1);
    adj = vector< vector<int>>(n + 5);
    ndfn = ind = mx = 0;
    vans.clear();
}
int main()
{
  //  run();
    M_Sayed;
    int cu = 0;
    while (cin >> n) {

        rest(1);
        ans.clear();
        if (!n)RT("");
        else if (test != 1)cout << endl;
        map<string, int>mp;
        vector<string>v;
        int indx = 0;
        while (n--) {
            string s;
            cin >> s;
            v.push_back(s);
            mp[s] = ind++;
        }
        cin >> m;
        while (m--) {
            int x, y;
            indx++;
            string in, ou;
            cin >> in >> ou;
            x = mp[in], y = mp[ou];
            adj[x].push_back(y);
            adj[y].push_back(x);
        }
        for (int i = 0; i < sz(v); i++) {
            if (dfn[i] == -1) {
                ok = 0;
                start = ndfn = 0;
                tarjan(i, -1);
            }
        }
        cout << "City map #" << test++ << ": " << sz(ans) << " camera(s) found\n";
        set<string>an;
        for (auto i : ans) {
           an.insert(v[i]);
        }
        for (auto i : an)cout << i << endl;
    }
}